snippet pyproject "basic pyproject.toml template" b
[tool.black]
line-length = 110
target-version = ['py39']
extend-exclude = '''
/(
    scripts
    |tools
    |tests
    |doc
    |venv
)/
'''

[tool.isort]
line_length = 110
py_version = 39
profile = "black"
skip_gitignore = true
filter_files = true
atomic = true
extend_skip = [
    "scripts",
    "tools",
    "tests",
    "doc",
    "venv",
]

[tool.mypy]
python_version = "3.9"
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
exclude = [
    "scripts",
    "tools",
    "tests",
    "doc",
    "venv"
]

[[tool.mypy.overrides]]
module = "numpy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "-vv --strict-config --strict-markers"
markers = [
    "unit: unit test for single functions and classes",
    "integration: test integrating several units without hardware dependencies or external software components",
    "system: test running the full system on real hardware but without external software components",
    "conformance: test checking the formal specification against a customer use case",
    "reliability: long-running test checking the reliability of a customer use case",
    "performance: long-running test running a resource critical use case",
    "acceptance: test running final checks before customer release"
]

[tool.ruff]
line-length = 110
target-version = "py39"
extend-select = ["I", "N", "UP", "B", "A", "PL", "NPY"]
extend-exclude = [
    "scripts",
    "tools",
    "tests",
    "doc",
    "venv",
]
endsnippet

snippet #! "basic header" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
	Author:         ${1}
	Company:        ${2}
	Date:           ${3}
	Description:    ${4}
	Developer Hint: ${5}
"""

$0
endsnippet

snippet script "basic script template" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
	Author:         ${1}
	Company:        ${2}
	Date:           ${3}
	Description:    ${4}
	Developer Hint: ${5}
"""

import argparse
import logging
import sys
import typing

logger = logging.getLogger(__name__)


def main(args: argparse.Namespace) -> int:
	${0}
	return 0


def str_to_bool(value: typing.Union[str, bool]) -> bool:
	if isinstance(value, bool):
		return value
	if value.lower() in ("yes", "true", "t", "y", "1"):
		return True
	elif value.lower() in ("no", "false", "f", "n", "0"):
		return False
	else:
		raise argparse.ArgumentTypeError("Boolean value expected.")


if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument(
		"--debug",
		type=str_to_bool,
		nargs="?",
		const=True,
		default=False,
		help="Activate debug mode.",
	)
	parser.add_argument(
		"argv",
		nargs="*",
	)
	args = parser.parse_args()

	if args.debug:
		LOGGING_LEVEL = logging.DEBUG
	else:
		LOGGING_LEVEL = logging.ERROR

	LOGGING_FORMAT_STRING = "%(asctime)s | %(name)s | %(levelname)s | %(module)s, %(threadName)s, %(funcName)s, %(lineno)d | %(message)s"
	logging.basicConfig(format=LOGGING_FORMAT_STRING, level=LOGGING_LEVEL)
	logging.debug("PATH: %s", sys.path)
	logging.debug("args: %s", args)
	return_code = main(args)
	logging.info("Done.")
	sys.exit(return_code)
endsnippet
